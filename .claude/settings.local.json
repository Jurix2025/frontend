{
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(xcopy:*)",
      "Bash(npm run dev:*)",
      "Bash(if exist .next rmdir /s /q .next)",
      "Bash(tasklist:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "Bash(dir \"src\\app\\generate\\[documentType]\" /b)",
      "Bash(dir \"src\\app\\generate\\[documentType]\")",
      "Bash(timeout /t 5)",
      "Bash(git checkout HEAD -- src/app/generate/page.tsx)",
      "Bash(docker build -t jurix-frontend:latest .)",
      "Bash(chmod +x deploy-azure.sh)",
      "Bash(az webapp show --name jurix --resource-group jurix --query \"{State:state, HostNames:defaultHostName}\" -o json)",
      "Bash(az webapp config appsettings list --name jurix --resource-group jurix --query \"[].{Name:name, Value:value}\" -o table)",
      "Bash(az webapp restart --name jurix --resource-group jurix)",
      "Bash(az webapp log tail --name jurix --resource-group jurix --timeout 30)",
      "Bash(az webapp log tail --name jurix --resource-group jurix)",
      "Bash(az account show --query \"{SubscriptionId:id, SubscriptionName:name, User:user.name, TenantId:tenantId}\" -o json)",
      "Bash(az webapp config container show --name jurix --resource-group jurix)",
      "Bash(az webapp log download --name jurix --resource-group jurix --log-file /tmp/webapp-logs.zip)",
      "Read(//private/tmp/**)",
      "Bash(cat /tmp/LogFiles/2025_10_18_10-30-1-208_docker.log)",
      "Bash(az acr repository show-tags --name jurix --repository jurix-frontend --output table)",
      "Bash(az webapp config container set )",
      "Bash(az webapp config appsettings list --name jurix --resource-group jurix -o table)",
      "Bash(az webapp show --name jurix --resource-group jurix --query \"{State:state, ContainerSettings:siteConfig.linuxFxVersion}\" -o json)",
      "Bash(timeout 20 az webapp log tail --name jurix --resource-group jurix)",
      "Bash(az acr repository show --name jurix --image jurix-frontend:latest --query \"{Name:name, Digest:digest, CreatedTime:createdTime}\" -o json)",
      "Bash(az webapp identity assign --name jurix --resource-group jurix --query principalId -o tsv)",
      "Bash(az webapp show --name jurix --resource-group jurix --query \"{State:state, DefaultHostName:defaultHostName}\" -o json)",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\" https://jurix-gbesgueyb4g7gtee.westeurope-01.azurewebsites.net)",
      "Bash(az webapp log download --name jurix --resource-group jurix --log-file /tmp/latest-logs.zip)",
      "Bash(unzip -o latest-logs.zip)",
      "Bash(timeout 30 az webapp log tail --name jurix --resource-group jurix)",
      "Bash(curl -s https://jurix-gbesgueyb4g7gtee.westeurope-01.azurewebsites.net)",
      "Read(//Users/navruz/**)",
      "Bash(docker run -d -p 3001:3000 )",
      "Bash(jurix-frontend:latest)",
      "Bash(docker logs jurix-test)",
      "Bash(curl -s http://localhost:3001)",
      "Bash(docker stop jurix-test)",
      "Bash(docker rm jurix-test)",
      "Bash(curl -s -o /dev/null -w \"HTTP Status: %{http_code}\\n\" https://jurix-gbesgueyb4g7gtee.westeurope-01.azurewebsites.net)",
      "Bash(__NEW_LINE__ echo \"Starting fresh Docker container locally on port 3001...\")",
      "Bash(docker run -d )",
      "Bash(__NEW_LINE__ echo \"Container ID:\")",
      "Bash(curl -s http://localhost:3000)",
      "Bash(echo \"\" echo \"Latest Docker container errors:\" find /tmp/azure-logs -name \"*docker*.log\" -exec tail -100 {})",
      "Bash(az webapp config appsettings list --name jurix --resource-group jurix --query \"[?contains(name, ''DOCKER'')]\" -o table)",
      "Bash(az acr update --name jurix --admin-enabled true --query \"{AdminEnabled:adminUserEnabled, LoginServer:loginServer}\" -o json)",
      "Bash(az webapp config appsettings list --name jurix --resource-group jurix --query \"[?name==''DOCKER_REGISTRY_SERVER_PASSWORD''].{Name:name, HasValue:value!=null}\" -o table)",
      "Bash(npm run build)",
      "Bash(FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch AZURE_DEPLOYMENT_ISSUE.md deploy-azure.sh' --prune-empty --tag-name-filter cat -- --all)",
      "Bash(rm AZURE_DEPLOYMENT_ISSUE.md deploy-azure.sh)",
      "Bash(git add -A)",
      "Bash(git commit -m \"Remove files containing secrets\")"
    ],
    "deny": [],
    "ask": []
  }
}
